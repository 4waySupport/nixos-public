#-MIBFILE: NET-SNMP-AGENT-MIB.mib

NET-SNMP-AGENT-MIB DEFINITIONS ::= BEGIN


SnmpEngineID ::=
	OCTET STRING (SIZE(5..32))

SnmpSecurityModel ::=
	INTEGER (0..2147483647)

SnmpMessageProcessingModel ::=
	INTEGER (0..2147483647)

SnmpSecurityLevel ::=
	INTEGER {
	noAuthNoPriv(1),
	authNoPriv(2),
	authPriv(3)
	}

SnmpAdminString ::=
	OCTET STRING (SIZE(0..255))

netSnmp OBJECT IDENTIFIER ::= { enterprises 8072 }
netSnmpObjects OBJECT IDENTIFIER ::= { netSnmp 1 }
netSnmpEnumerations OBJECT IDENTIFIER ::= { netSnmp 3 }
netSnmpModuleIDs OBJECT IDENTIFIER ::= { netSnmpEnumerations 1 }
netSnmpObjects OBJECT IDENTIFIER ::= { netSnmp 1 }
netSnmpNotificationPrefix OBJECT IDENTIFIER ::= { netSnmp 4 }
netSnmpNotifications OBJECT IDENTIFIER ::= { netSnmpNotificationPrefix 0 }
netSnmpConformance OBJECT IDENTIFIER ::= { netSnmp 5 }
netSnmpGroups OBJECT IDENTIFIER ::= { netSnmpConformance 2 }
DisplayString ::=
	OCTET STRING (SIZE(0..255))

PhysAddress ::=
	OCTET STRING

MacAddress ::=
	OCTET STRING (SIZE(6))

TruthValue ::=
	INTEGER {
	true(1),
	false(2)
	}

TestAndIncr ::=
	INTEGER (0..2147483647)

AutonomousType ::=
	OBJECT IDENTIFIER

InstancePointer ::=
	OBJECT IDENTIFIER

VariablePointer ::=
	OBJECT IDENTIFIER

RowPointer ::=
	OBJECT IDENTIFIER

RowStatus ::=
	INTEGER {
	active(1),
	notInService(2),
	notReady(3),
	createAndGo(4),
	createAndWait(5),
	destroy(6)
	}

TimeStamp ::=
	TimeTicks

TimeInterval ::=
	INTEGER (0..2147483647)

DateAndTime ::=
	OCTET STRING (SIZE(8|11))

StorageType ::=
	INTEGER {
	other(1),
	volatile(2),
	nonVolatile(3),
	permanent(4),
	readOnly(5)
	}

TDomain ::=
	OBJECT IDENTIFIER

TAddress ::=
	OCTET STRING (SIZE(1..255))

NetsnmpCacheStatus ::=
	INTEGER {
	enabled(1),
	disabled(2),
	empty(3),
	cached(4),
	expired(5)
	}

netSnmpAgentMIB OBJECT IDENTIFIER ::= { netSnmpModuleIDs 2 }

nsVersion OBJECT IDENTIFIER ::= { netSnmpObjects 1 }

nsMibRegistry OBJECT IDENTIFIER ::= { netSnmpObjects 2 }

nsExtensions OBJECT IDENTIFIER ::= { netSnmpObjects 3 }

nsDLMod OBJECT IDENTIFIER ::= { netSnmpObjects 4 }

nsCache OBJECT IDENTIFIER ::= { netSnmpObjects 5 }

nsErrorHistory OBJECT IDENTIFIER ::= { netSnmpObjects 6 }

nsConfiguration OBJECT IDENTIFIER ::= { netSnmpObjects 7 }

nsTransactions OBJECT IDENTIFIER ::= { netSnmpObjects 8 }

nsCacheDefaultTimeout OBJECT-TYPE
	SYNTAX INTEGER
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Default cache timeout value (unless overridden
for a particular cache entry)."
	::= { nsCache 1 }


nsCacheEnabled OBJECT-TYPE
	SYNTAX TruthValue
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Whether data caching is active overall."
	::= { nsCache 2 }


nsCacheTable OBJECT-TYPE
	SYNTAX SEQUENCE OF NsCacheEntry
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "A table of individual MIB module data caches."
	::= { nsCache 3 }


nsCacheEntry OBJECT-TYPE
	SYNTAX NsCacheEntry
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "A conceptual row within the cache table."
	INDEX { IMPLIED nsCachedOID  }

	::= { nsCacheTable 1 }

nsCacheEntry ::=
	SEQUENCE {
		nsCachedOID OBJECT IDENTIFIER,
		nsCacheTimeout INTEGER,
		nsCacheStatus NetsnmpCacheStatus
		}

nsCachedOID OBJECT-TYPE
	SYNTAX OBJECT IDENTIFIER
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The root OID of the data being cached."
	::= { nsCacheEntry 1 }


nsCacheTimeout OBJECT-TYPE
	SYNTAX INTEGER
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The length of time (?in seconds) for which the data in
this particular cache entry will remain valid."
	::= { nsCacheEntry 2 }


nsCacheStatus OBJECT-TYPE
	SYNTAX INTEGER {
	enabled(1),
	disabled(2),
	empty(3),
	cached(4),
	expired(5)
	}
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The current status of this particular cache entry.
Acceptable values for Set requests are 'enabled(1)',
'disabled(2)' or 'empty(3)' (to clear all cached data).
Requests to read the value of such an object will
return 'disabled(2)' through to 'expired(5)'."
	::= { nsCacheEntry 3 }


nsConfigDebug OBJECT IDENTIFIER ::= { nsConfiguration 1 }

nsConfigLogging OBJECT IDENTIFIER ::= { nsConfiguration 2 }

nsDebugEnabled OBJECT-TYPE
	SYNTAX TruthValue
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Whether the agent is configured to generate debugging output"
	::= { nsConfigDebug 1 }


nsDebugOutputAll OBJECT-TYPE
	SYNTAX TruthValue
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Whether the agent is configured to display all debugging output
rather than filtering on individual debug tokens.  Nothing will
be generated unless nsDebugEnabled is also true(1)"
	::= { nsConfigDebug 2 }


nsDebugDumpPdu OBJECT-TYPE
	SYNTAX TruthValue
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Whether the agent is configured to display raw packet dumps.
This is unrelated to the nsDebugEnabled setting."
	::= { nsConfigDebug 3 }


nsDebugTokenTable OBJECT-TYPE
	SYNTAX SEQUENCE OF NsDebugTokenEntry
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "A table of individual debug tokens, used to control the selection
of what debugging output should be produced.  This table is only
effective if nsDebugOutputAll is false(2), and nothing will
be generated unless nsDebugEnabled is also true(1)"
	::= { nsConfigDebug 4 }


nsDebugTokenEntry OBJECT-TYPE
	SYNTAX NsDebugTokenEntry
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "A conceptual row within the debug token table."
	INDEX { IMPLIED nsDebugTokenPrefix  }

	::= { nsDebugTokenTable 1 }

nsDebugTokenEntry ::=
	SEQUENCE {
		nsDebugTokenPrefix DisplayString,
		nsDebugTokenStatus RowStatus
		}

nsDebugTokenPrefix OBJECT-TYPE
	SYNTAX DisplayString
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "A token prefix for which to generate the corresponding
debugging output.  Note that debug output will be generated
for all registered debug statements sharing this prefix
(rather than an exact match).  Nothing will be generated
unless both nsDebuggingEnabled is set true(1) and the
corresponding nsDebugTokenStatus value is active(1)."
	::= { nsDebugTokenEntry 2 }


nsDebugTokenStatus OBJECT-TYPE
	SYNTAX RowStatus
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Whether to generate debug output for the corresponding debug
token prefix.  Nothing will be generated unless both
nsDebuggingEnabled is true(1) and this instance is active(1).
Note that is valid for an instance to be left with the value
notInService(2) indefinitely - i.e. the meaning of 'abnormally
long' (see RFC 2579, RowStatus) for this table is infinite."
	::= { nsDebugTokenEntry 4 }


nsLoggingTable OBJECT-TYPE
	SYNTAX SEQUENCE OF NsLoggingEntry
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "A table of individual logging output destinations, used to control
where various levels of output from the agent should be directed."
	::= { nsConfigLogging 1 }


nsLoggingEntry OBJECT-TYPE
	SYNTAX NsLoggingEntry
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "A conceptual row within the logging table."
	INDEX { nsLogLevel , IMPLIED nsLogToken }

	::= { nsLoggingTable 1 }

nsLoggingEntry ::=
	SEQUENCE {
		nsLogLevel INTEGER,
		nsLogToken DisplayString,
		nsLogType INTEGER,
		nsLogMaxLevel INTEGER,
		nsLogStatus RowStatus
		}

nsLogLevel OBJECT-TYPE
	SYNTAX INTEGER {
	emergency(0),
	alert(1),
	critical(2),
	error(3),
	warning(4),
	notice(5),
	info(6),
	debug(7)
	}
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The (minimum) priority level for which this logging entry
should be applied."
	::= { nsLoggingEntry 1 }


nsLogToken OBJECT-TYPE
	SYNTAX DisplayString
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "A token for which to generate logging entries.
Depending on the style of logging, this may either
be simply an arbitrary token, or may have some
particular meaning (such as the filename to log to)."
	::= { nsLoggingEntry 2 }


nsLogType OBJECT-TYPE
	SYNTAX INTEGER {
	stdout(1),
	stderr(2),
	file(3),
	syslog(4),
	callback(5)
	}
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The type of logging for this entry."
	::= { nsLoggingEntry 3 }


nsLogMaxLevel OBJECT-TYPE
	SYNTAX INTEGER {
	emergency(0),
	alert(1),
	critical(2),
	error(3),
	warning(4),
	notice(5),
	info(6),
	debug(7)
	}
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The maximum priority level for which this logging entry
should be applied."
	::= { nsLoggingEntry 4 }


nsLogStatus OBJECT-TYPE
	SYNTAX RowStatus
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Whether to generate logging output for this entry.
Note that is valid for an instance to be left with the value
notInService(2) indefinitely - i.e. the meaning of 'abnormally
long' (see RFC 2579, RowStatus) for this table is infinite."
	::= { nsLoggingEntry 5 }


nsTransactionTable OBJECT-TYPE
	SYNTAX SEQUENCE OF NsTransactionEntry
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "Lists currently outstanding transactions in the net-snmp agent.
This includes requests to AgentX subagents, or proxied SNMP agents."
	::= { nsTransactions 1 }


nsTransactionEntry OBJECT-TYPE
	SYNTAX NsTransactionEntry
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "A row describing a given transaction."
	INDEX { nsTransactionID  }

	::= { nsTransactionTable 1 }

nsTransactionEntry ::=
	SEQUENCE {
		nsTransactionID Unsigned32,
		nsTransactionMode Integer32
		}

nsTransactionID OBJECT-TYPE
	SYNTAX INTEGER (0..4294967295)
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The internal identifier for a given transaction."
	::= { nsTransactionEntry 1 }


nsTransactionMode OBJECT-TYPE
	SYNTAX INTEGER
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The mode number for the current operation being performed."
	::= { nsTransactionEntry 2 }


nsModuleTable OBJECT-TYPE
	SYNTAX SEQUENCE OF NsModuleEntry
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "A table displaying all the oid's registered by mib modules in
the agent.  Since the agent is modular in nature, this lists
each module's OID it is responsible for and the name of the module"
	::= { nsMibRegistry 1 }


nsModuleEntry OBJECT-TYPE
	SYNTAX NsModuleEntry
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "An entry containing a registered mib oid."
	INDEX { nsmContextName , nsmRegistrationPoint, nsmRegistrationPriority }

	::= { nsModuleTable 1 }

nsModuleEntry ::=
	SEQUENCE {
		nsmContextName SnmpAdminString,
		nsmRegistrationPoint OBJECT IDENTIFIER,
		nsmRegistrationPriority INTEGER,
		nsModuleName DisplayString,
		nsModuleModes BITS,
		nsModuleTimeout Integer32
		}

nsmContextName OBJECT-TYPE
	SYNTAX SnmpAdminString
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The context name the module is registered under."
	::= { nsModuleEntry 1 }


nsmRegistrationPoint OBJECT-TYPE
	SYNTAX OBJECT IDENTIFIER
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The registry OID of a mib module."
	::= { nsModuleEntry 2 }


nsmRegistrationPriority OBJECT-TYPE
	SYNTAX INTEGER (-2147483648..2147483647)
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The priority of the registered mib module."
	::= { nsModuleEntry 3 }


nsModuleName OBJECT-TYPE
	SYNTAX DisplayString
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The module name that registered this OID."
	::= { nsModuleEntry 4 }


nsModuleModes OBJECT-TYPE
	SYNTAX OCTET STRING {
	getAndGetNext(0),
	set(1),
	getBulk(2)
	}
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The modes that the particular lower level handler can cope
with directly."
	::= { nsModuleEntry 5 }


nsModuleTimeout OBJECT-TYPE
	SYNTAX INTEGER
	ACCESS read-only
	STATUS mandatory
	DESCRIPTION "The registered timeout.  This is only meaningful for handlers
that expect to return results at a later date (subagents,
etc)"
	::= { nsModuleEntry 6 }


nsModuleGroup OBJECT IDENTIFIER ::= { netSnmpGroups 2 }

nsCacheGroup OBJECT IDENTIFIER ::= { netSnmpGroups 4 }

nsConfigGroups OBJECT IDENTIFIER ::= { netSnmpGroups 7 }

nsDebugGroup OBJECT IDENTIFIER ::= { nsConfigGroups 1 }

nsLoggingGroup OBJECT IDENTIFIER ::= { nsConfigGroups 2 }

nsTransactionGroup OBJECT IDENTIFIER ::= { netSnmpGroups 8 }

nsAgentNotifyGroup OBJECT IDENTIFIER ::= { netSnmpGroups 9 }

nsNotifyStart TRAP-TYPE
	ENTERPRISE netSnmpNotifications
DESCRIPTION "An indication that the agent has started running."
	::= 1


nsNotifyShutdown TRAP-TYPE
	ENTERPRISE netSnmpNotifications
DESCRIPTION "An indication that the agent is in the process of being shut down."
	::= 2


nsNotifyRestart TRAP-TYPE
	ENTERPRISE netSnmpNotifications
DESCRIPTION "An indication that the agent has been restarted.
This does not imply anything about whether the configuration has
changed or not (unlike the standard coldStart or warmStart traps)"
	::= 3


END

