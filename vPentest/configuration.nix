{ config, pkgs, ... }:

{
  imports =
    [
      # Include the hardware configuration for the machine.
      /etc/nixos/hardware-configuration.nix
    ];

  # systemd
  boot.loader.systemd-boot.enable = true;

  # Networking
  networking.hostName = "${HOSTNAME}";
  networking.useDHCP = true;
  time.timeZone = "Europe/London";

  #Tail Scale
  environment.systemPackages = [ pkgs.tailscale ];
  services.tailscale.enable = true;
  boot.kernel.sysctl."net.ipv4.ip_forward" = 1;
  networking.firewall.enable = false;
  networking.firewall.checkReversePath = "loose";
  
  systemd.services.tailscale-autoconnect = {
    description = "Automatic connection to Tailscale";
    after = [ "network-pre.target" "tailscale.service" ];
    wants = [ "network-pre.target" "tailscale.service" ];
    wantedBy = [ "multi-user.target" ];
    serviceConfig.Type = "oneshot";

  script = with pkgs; ''
      sleep 2
      status="$(${tailscale}/bin/tailscale status -json | ${jq}/bin/jq -r .BackendState)"
      if [ $status = "Running" ]; then # if so, then do nothing
        ${tailscale}/bin/tailscale up -authkey ${TS_KEY}
        exit 0
      fi
      ${tailscale}/bin/tailscale up -authkey ${TS_KEY}
    '';
  };

  # Install Docker.
  virtualisation.docker.enable = true;

  # Enable SSH.
  services.openssh.enable = true;
  services.openssh.permitRootLogin = "yes";
  
  #Sorandom
  system.stateVersion = "22.11";

  # Create a user.
  users.users = {
    4way = {
      isNormalUser = true;
      extraGroups = [ "wheel" "networkmanager" ];
      password = "${USR_PW}";
      openssh.authorizedKeys.keys = [ "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGxP5lOE1Jkx0InbMhNN3QcJObTmDuftS/BvlGk261FF7tKyq9edjCVZfkUo2I+1KGuEKhDCS27UNR3P8bnCXomYVMTKLQkG/dVHX78bN8aIOnMYDt3Bwfx6D5ZGP6t1rVPOhKkg5H+x/hq4/lsuqaMJR9nGMxJK1qKqIQfpMaTmH1guH8NQdqaxo7ccHolpvxKyJyrz2KwvjEeN4wPDFWnsSr3OC52+fOS+k7gkOtOoxEnRbjiKSeLdrmWA8cRV/p8D19iIw6xPDr/dCOrCk/MAU41bjKgO8w8RvHN8N9SZc6JuER+ZsLtXjQRIZGAgGs5X2F0D2jASEGZffXQ3/9" ];
    };
  };
}
